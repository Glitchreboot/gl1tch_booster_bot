from aiogram import Bot, Dispatcher, executor, types
import sqlite3
import os

API_TOKEN = os.getenv("TG_BOT_TOKEN")
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# –ü—Ä–æ—Å—Ç–∞—è –ë–î SQLite
conn = sqlite3.connect('booster.db')
cursor = conn.cursor()
cursor.execute("""
CREATE TABLE IF NOT EXISTS users (
    tg_id INTEGER PRIMARY KEY,
    nickname TEXT,
    channel_url TEXT,
    points INTEGER DEFAULT 0
)
""")
cursor.execute("""
CREATE TABLE IF NOT EXISTS tasks (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    target_url TEXT,
    done INTEGER DEFAULT 0
)
""")
conn.commit()

@dp.message_handler(commands=['start'])
async def cmd_start(msg: types.Message):
    cursor.execute("INSERT OR IGNORE INTO users (tg_id) VALUES (?)", (msg.from_user.id,))
    conn.commit()
    await msg.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ GL1TCH.REBOOT Booster!\n"
        "–ü—Ä–∏—à–ª–∏ —Å–≤–æ—é —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª/YouTube, –∞ —è —Å–≥–µ–Ω–µ—Ä–∏—Ä—É—é —Ç–µ–±–µ –∑–∞–¥–∞–Ω–∏—è."
    )

@dp.message_handler(lambda m: m.text and m.text.startswith("http"))
async def register_channel(msg: types.Message):
    url = msg.text.strip()
    cursor.execute(
        "UPDATE users SET channel_url = ? WHERE tg_id = ?",
        (url, msg.from_user.id)
    )
    conn.commit()
    await msg.answer(
        f"–¢–≤–æ–π –∫–∞–Ω–∞–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {url}\n"
        "–°–µ–π—á–∞—Å —Å–æ–∑–¥–∞—é —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á ‚Äî –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ —á—É–∂–∏–µ –∫–∞–Ω–∞–ª—ã, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–ª—ã."
    )
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º, –Ω–∞–ø—Ä–∏–º–µ—Ä, 3 –∑–∞–¥–∞–Ω–∏—è:
    cursor.execute("DELETE FROM tasks WHERE user_id = ?", (msg.from_user.id,))
    # –ë–µ—Ä—ë–º 3 —Å–ª—É—á–∞–π–Ω—ã—Ö –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:
    cursor.execute("SELECT channel_url FROM users WHERE channel_url IS NOT NULL AND tg_id != ? ORDER BY RANDOM() LIMIT 3", (msg.from_user.id,))
    targets = cursor.fetchall()
    for (target_url,) in targets:
        cursor.execute(
            "INSERT INTO tasks (user_id, target_url) VALUES (?, ?)",
            (msg.from_user.id, target_url)
        )
    conn.commit()
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫:
    keyboard = types.InlineKeyboardMarkup()
    for row in cursor.execute("SELECT id, target_url FROM tasks WHERE user_id = ? AND done = 0", (msg.from_user.id,)):
        task_id, target = row
        keyboard.add(types.InlineKeyboardButton(
            text=f"–ü—Ä–æ–≤–µ—Ä–∏—Ç—å {target}",
            callback_data=f"check_{task_id}"
        ))
    await msg.answer("–¢–≤–æ–∏ –∑–∞–¥–∞–Ω–∏—è:", reply_markup=keyboard)

@dp.callback_query_handler(lambda c: c.data.startswith("check_"))
async def check_subscription(cb: types.CallbackQuery):
    task_id = int(cb.data.split("_")[1])
    cursor.execute("SELECT user_id, target_url FROM tasks WHERE id = ?", (task_id,))
    user_id, target_url = cursor.fetchone()
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –≤ Telegram:
    try:
        member = await bot.get_chat_member(chat_id=target_url, user_id=user_id)
        subscribed = member.is_chat_member()
    except:
        subscribed = False
    if subscribed:
        cursor.execute("UPDATE tasks SET done = 1 WHERE id = ?", (task_id,))
        cursor.execute("UPDATE users SET points = points + 10 WHERE tg_id = ?", (user_id,))
        conn.commit()
        await cb.answer("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! +10 –±–∞–ª–ª–æ–≤")
    else:
        await cb.answer("‚ùå –¢—ã –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω.")

@dp.message_handler(commands=['profile'])
async def profile(msg: types.Message):
    cursor.execute("SELECT points, channel_url FROM users WHERE tg_id = ?", (msg.from_user.id,))
    pts, url = cursor.fetchone()
    await msg.answer(f"üîπ –¢–≤–æ–π –∫–∞–Ω–∞–ª: {url}\nüîπ –ë–∞–ª–ª—ã: {pts}")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
